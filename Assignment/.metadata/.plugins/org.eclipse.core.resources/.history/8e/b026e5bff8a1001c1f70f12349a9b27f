package ass1;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class MSequentialSorter implements Sorter {

  @Override
  public <T extends Comparable<? super T>> List<T> sort(List<T> list) {
	  
	  int size = list.size();
	  
	  if(size < 2) {
		  return list;
	  }
	  	  
	  List<T> left = sort(new ArrayList<>(list.subList(0, (size + 1)/2)));
	  List<T> right = sort(new ArrayList<>(list.subList((size + 1)/2, size)));
	  
	  return Stream.of(left, right)
			  .flatMap(Collection::stream)
			  .sorted()
			  .toList();
	  
	  //return merge(left, right);
  }
  
  
  public <T extends Comparable<? super T>> List<T> merge(List<T> left, List<T> right){
	  
	  Stream<T> combinedStream = Stream.of(left, right)
			  .flatMap(Collection::stream)
			  .sorted();
			
	  
	  return combinedStream.toList();
	  
	  
//	  ArrayList<T> toReturn = new ArrayList<>();
	  
//	  int i = 0, j = 0;
//	  
//	  while(i < left.size() && j < right.size()) {
//		  if(left.get(i).compareTo(right.get(j))<0) {
//			  toReturn.add(left.get(i++));
//		  } else {
//			  toReturn.add(right.get(j++));
//		  }
//	  }
//	  
//	  while(i < left.size()) {
//		  toReturn.add(left.get(i++));
//	  }
//	  
//	  while(j < right.size()) {
//		  toReturn.add(right.get(j++));
//	  }
//	  
//	  return toReturn;
  }
}